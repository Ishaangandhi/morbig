#!/bin/sh

readonly PROGDIR=$(dirname "$0")
readonly OLDDIR=$PWD

# cleanup
find "$PROGDIR" \( -name '*.sjson' -o -name '*.morbigerror' \) -delete
[ "$1" = 'clean' ] && exit 0

# Find morbig; either in this directory, or in the $PATH
if [ -e "$PROGDIR"/../bin/morbig ]
then
    morbig="$PROGDIR"/../bin/morbig
elif which morbig >/dev/null
then
    printf 'Warning: Could not find morbig in this directory. Using the one in the PATH.\n'
    morbig=morbig
else
    printf 'Could not find morbig. Did you compile it?\n'
    exit 1
fi

# Define counters
good_total=0
good_accepted=0
good_rejected=0
good_unexpected=0
bad_total=0
bad_accepted=0
bad_rejected=0

# Test loop
for category in good bad
do
    for test in $(find "$PROGDIR"/"$category" -type f -name '*.sh' | sort -n)
    do
	test=${test%.sh}

	if [ \! -f "$test.sh" ]
	then
	    printf 'Warning: File `%s` does not exist or is not a file.
         Did you create a test whose name contains a space?\n' "$test"
	    continue
	fi

	case "$category" in
	    'good') good_total=$((good_total + 1)) ;;
	    'bad') bad_total=$((bad_total + 1)) ;;
	esac
	
	if "$morbig" --as simple "$test.sh" 2>/dev/null
	then
	    case "$category" in
		'bad')
		    printf 'Error: Test `%s` should have been rejected.\n' "$test"
		    bad_accepted=$((bad_accepted + 1))
		    ;;
		'good')
		    if [ \! -f "$test.sh.expected" ]
		    then
			printf 'Warning: Test `%s` does not have an .expected file.\n' "$test"
			good_unexpected=$((good_unexpected + 1))
		    elif ! diff "$test.sh.sjson" "$test.sh.expected" 2>&1 >/dev/null
		    then
			printf 'Error: Test `%s` does not have the expected output.\n' "$test"
			good_unexpected=$((good_unexpected + 1))
		    else
			good_accepted=$((good_accepted + 1))
		    fi
	    esac
	else
	    case "$category" in
		'bad') bad_rejected=$((bad_rejected + 1)) ;;
		'good')
		    good_rejected=$((good_rejected + 1))
		    printf 'Error: Test `%s` should have been accepted.\n' "$test"
	    esac
	fi
    done
done

passed=$((good_accepted + bad_rejected))
failed=$((good_unexpected + good_rejected + bad_accepted))
total=$((good_total + bad_total))

if [ "$((passed + failed))" -ne "$total" ]
then
    printf 'Erk... there must be a problem in this test script.\n'
fi

printf '\nSummary:
-----------------------------------
| Tests | Passed | Failed | Total |
|-------|--------|--------|-------|
| good  |    %3d |    %3d |   %3d | %s
| bad   |    %3d |    %3d |   %3d |
| all   |    %3d |    %3d |   %3d |
-----------------------------------\n' \
       "$good_accepted" "$((good_unexpected + good_rejected))" "$good_total" \
       "$([ "$good_unexpected" -ne 0 ] && printf '(inc. %d tests with wrong output)' "$good_unexpected")" \
       "$bad_rejected" "$bad_accepted" "$bad_total" \
       "$passed" "$failed" "$total"

if [ "$failed" -gt 0 ]
then
    exit 2
else
    printf "\n         Congratulations!\n"
    exit 0
fi
